buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    }
}

allprojects {
    apply plugin: 'maven'

    group = 'com.alibaba.citrus'
    version = '3.2.4'
}

apply from: "librariesPlugin.gradle"

libraries {

    slf4j {
        item 'org.slf4j:slf4j-api:1.7.5'
        item 'org.slf4j:jcl-over-slf4j:1.7.5'
    }

    servletApi {
        if (project.hasProperty('servlet2')) {
            item 'javax.servlet:servlet-api:2.5'
        } else if (project.hasProperty('servlet30')) {
            item 'javax.servlet:javax.servlet-api:3.0.1'
        } else /* servlet31 by default */ {
            item 'javax.servlet:javax.servlet-api:3.1.0'
        }
    }

    mailApi {
        item 'javax.mail:mail:1.4.7', {
            exclude(module: 'activation')
        }
        item 'javax.activation:activation:1.1.1'
    }

    groovy 'org.codehaus.groovy:groovy-all:2.1.7', {
        exclude(module: 'ant')
        exclude(module: 'ant-launcher')
        exclude(module: 'jline')
    }

    spring {
        item 'org.springframework:spring-core:3.2.7.RELEASE'
        item 'org.springframework:spring-beans:3.2.7.RELEASE'
        item 'org.springframework:spring-aop:3.2.7.RELEASE'
        item 'org.springframework:spring-context:3.2.7.RELEASE'
        item 'org.springframework:spring-web:3.2.7.RELEASE'
        item 'org.springframework:spring-context-support:3.2.7.RELEASE'
        item 'org.springframework:spring-tx:3.2.7.RELEASE'
        item 'org.springframework:spring-jdbc:3.2.7.RELEASE'
        item 'org.springframework:spring-orm:3.2.7.RELEASE'
        item 'org.springframework:spring-webmvc:3.2.7.RELEASE'
    }

    springTest 'org.springframework:spring-test:3.2.7.RELEASE'

    testSuite {
        item 'junit:junit:4.10', {
            exclude(module: 'hamcrest-core')
        }
        item 'org.hamcrest:hamcrest-library:1.1'
        item 'org.httpunit:httpunit:1.7.2', {
            exclude(group: 'rhino')
            exclude(module: 'junit')
            exclude(module: 'jtidy')
            exclude(module: 'xerces')
            exclude(module: 'xercesImpl')
            exclude(module: 'xmlParserAPIs')
            exclude(module: 'servlet-api')
            exclude(module: 'nekohtml')
        }
        item 'nekohtml:nekohtml:1.9.6.2', {
            exclude(module: 'xercesImpl')
        }
        item 'rhino:js:1.7R2'
        item 'org.easymock:easymockclassextension:3.2'
        item 'xerces:xercesImpl:2.11.0'
        item 'xalan:xalan:2.7.1', {
            exclude(module: 'xml-apis')
        }
    }
}

subprojects {
    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    [compileJava, compileTestJava, javadoc]*.options.collect { options ->
        options.encoding = 'UTF-8'
    }

    [compileJava, compileTestJava]*.options.collect { options ->
        options.compilerArgs.add '-Xlint:-options'
    }

    repositories {
        mavenCentral()
    }

    configurations {
        // Globally exclude commons-logging to prevent from conflict with jcl-over-slf4j
        all*.exclude module: 'commons-logging'
    }

    configurations.all {
        resolutionStrategy {
            // Command line: gradle -PdebugDeps dI --dependency=...
            if (!project.hasProperty('debugDeps')) {
                failOnVersionConflict()
            }
        }
    }

    sourceSets {
        test {
            // Because of the limitation of Sprint 'classpath:' resource resolver,
            // we need to put resources file in the classes folder, or Spring will not find them.
            output.resourcesDir = output.classesDir
        }
    }
}

// Non citrus-*-all projects
configure(subprojects.findAll { project -> !project.name.endsWith('-all') }) {

    task packageSources(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts.archives packageSources

    dependencies {
        compile libraries.slf4j
    }
}

import com.github.jengelman.gradle.plugins.shadow.transformers.*

// citrus-*-all projects
configure(subprojects.findAll { project -> project.name.endsWith('-all') }) {
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'maven-publish'

    configurations {
        runtime.transitive = false
    }

    shadowJar {
        classifier = ''
        transform(PropertiesFileTransformer) {
            paths = [
                    'META-INF/.+\\.bean-definition-parsers',
                    'META-INF/.+\\.bean-definition-decorators',
                    'META-INF/.+\\.bean-definition-decorators-for-attribute',
                    'META-INF/spring.configuration-points',
                    'META-INF/spring.handlers',
                    'META-INF/spring.schemas',
                    'META-INF/webx.internal-request-handlers'
            ]
        }
    }

    jar.enabled = false

    artifacts.archives shadowJar
}